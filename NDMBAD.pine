//@version=6
indicator('N-Degree Moment-Based Adaptive Detection', 'NDMBAD', true, timeframe = '', timeframe_gaps = true)


weighted_nd_moments(data, weights, len, deg = 1, off = 0) =>
    X = matrix.new<float>(len, deg + 1, 1)
    W = matrix.new<float>(len, len    , 0)

    for i = 0 to len - 1 
        for j = 0 to deg
            X.set(i, j, math.pow(len - i, j))

        W.set(i, i, weights.get(i))

    Y = array.new_float(len)

    for i = 0 to len - 1
        Y.set(i, data.get(i))

    XTW = X.transpose().mult(W)
    B   = XTW.mult(X).pinv().mult(XTW).mult(Y)

    points = array.new_float(len)

    for i = 0 to len - 1
        point = 0.

        for j = 0 to deg
            point += B.get(j) * math.pow(len - i - off, j)

        points.set(i, point)

    mean = points.get(0)

    sum_m2 = 0.
    sum_m3 = 0.
    sum_m4 = 0.
    sum_m5 = 0.
    sum_m6 = 0.
    sum_w  = 0.

    for i = 0 to len - 1
        diff   = data   .get(i) - points.get(i)
        weight = weights.get(i)

        sum_m2 += math.pow(diff, 2) * weight
        sum_m3 += math.pow(diff, 3) * weight
        sum_m4 += math.pow(diff, 4) * weight
        sum_m5 += math.pow(diff, 5) * weight
        sum_m6 += math.pow(diff, 6) * weight
        sum_w  += weight

    dev = math.sqrt(sum_m2 / sum_w)

    skew  = sum_m3 / sum_w / math.pow(dev, 3)
    kurt  = sum_m4 / sum_w / math.pow(dev, 4)
    hskew = sum_m5 / sum_w / math.pow(dev, 5)
    hkurt = sum_m6 / sum_w / math.pow(dev, 6)

    [mean, dev, skew, kurt, hskew, hkurt]


src    = input(close, 'Source'                                                )
length = input(256                                                            )
deg    = input(1    , 'Degree'                                                )
off    = input(0    , 'Offset'                                                )
time_  = input(true , 'Time'           , inline = '1', group = 'Weighting by:')
iv     = input(true , 'Inferred volume', inline = '1', group = 'Weighting by:')


len = length < 1 ? bar_index + 1 : length

data    = array.new_float(len)
weights = array.new_float(len)

for i = 0 to len - 1
    weight = (time_ ? (len - i) : 1) * (iv ? math.abs(close[i] - open[i]) : 1)

    data   .set(i, src[i])
    weights.set(i, weight)

[mean, dev, skew, kurt, hskew, hkurt] = weighted_nd_moments(data, weights, len, deg, off)

lim_lower = math.round_to_mintick(mean - dev * hkurt + dev * hskew)
ext_lower = math.round_to_mintick(mean - dev *  kurt + dev *  skew)
dev_lower = math.round_to_mintick(mean - dev                      )
basis     = math.round_to_mintick(mean                            )
dev_upper = math.round_to_mintick(mean + dev                      )
ext_upper = math.round_to_mintick(mean + dev *  kurt + dev *  skew)
lim_upper = math.round_to_mintick(mean + dev * hkurt + dev * hskew)


plot(lim_lower, 'lower limit'    , color.red   , 1, plot.style_stepline                        )
plot(ext_lower, 'lower extension', color.blue  , 2, plot.style_stepline                        )
plot(dev_lower, 'lower deviation', color.gray  , 1, plot.style_stepline, display = display.none)
plot(basis    , 'basis'          , color.purple, 2, plot.style_stepline, display = display.none)
plot(dev_upper, 'upper deviation', color.gray  , 1, plot.style_stepline, display = display.none)
plot(ext_upper, 'upper extension', color.red   , 2, plot.style_stepline                        )
plot(lim_upper, 'upper limit'    , color.blue  , 1, plot.style_stepline                        )
